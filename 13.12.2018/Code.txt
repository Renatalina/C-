Перегрузка операторов используется для улучшения читабельности программ и должна соответствовать определенным требованиям:
•	перегрузка операторов должна выполняться открытыми статическими методами класса;
•	у метода-оператора тип возвращаемого значения или одного из параметров должен совпадать с типом, в котором выполняется перегрузка оператора;
•	параметры метода-оператора не должны включать модификатор out и ref.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 class Point
    {
        public int X { get; set; }
        public int Y { get; set; }

        public static Point operator ++(Point p)
        {
            p.X++;
            p.Y++;

            return p;
        }
        public static Point operator --(Point p)
        {
            p.X--;
            p.Y--;

            return p;
        }

        public static Point operator -(Point p)
        {
            p.X *= -1;
            p.Y *= -1;

            return p;
            //return new Point { X = -p.X, Y = -p.Y };
        }
        public override string ToString()
        {
            return $"Point: X = {X}, Y = {Y}";
        }
    }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        static void Main(string[] args)
        {
            Point point = new Point { X = 12, Y = 23 };

            Console.WriteLine(point++); // 13 24
            Console.WriteLine(++point); // 14 25

            Console.WriteLine(point--); // 13 24
            Console.WriteLine(--point); // 12 23

            Console.WriteLine(-point);

            Console.ReadKey();
        }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


using static System.Console;

namespace SimpleProject
{
    class CPoint
    {
        public int X { get; set; }
        public int Y { get; set; }
    }
    struct SPoint
    {
        public int X { get; set; }
        public int Y { get; set; }
    }
    class Program
    {
        static void Main()
        {
            // работа метода ReferenceEquals со ссылочными и значимыми типами

            //ссылочный тип
            CPoint cp = new CPoint { X = 10, Y = 10 };
            CPoint cp1 = new CPoint { X = 10, Y = 10 };
            CPoint cp2 = cp1;

            // хотя cp и cp1 содержат одинаковые значения, они указывают на разные адреса памяти
            WriteLine($"ReferenceEquals(cp, cp1) = {ReferenceEquals(cp, cp1)}"); // false

            // cp1 и cp2 указывают на один и тот же адрес памяти
            WriteLine($"ReferenceEquals(cp1, cp2) = {ReferenceEquals(cp1, cp2)}"); // true

            // значимый тип
            SPoint sp = new SPoint { X = 10, Y = 10 };

            // при передаче в метод ReferenceEquals выполняется упаковка,
            // упакованные объекты располагаются по разным адресам
            WriteLine($"ReferenceEquals(sp, sp) = {ReferenceEquals(sp, sp)}"); // false

            // работа метода Equals со ссылочными и значимыми типами
            
            //выполняется сравнение адресов ссылочных типов
            WriteLine($"Equals(cp, cp1) = {Equals(cp, cp1)}"); // false

            // значимый тип
            SPoint sp1 = new SPoint { X = 10, Y = 10 };

            // выполняется сравнение значений полей
            WriteLine($"Equals(sp, sp1) = {Equals(sp, sp1)}"); // true
        }
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

При перегрузке операторов true и false разработчик задает критерий истинности для своего типа данных.
После этого, объекты типа напрямую можно использовать в структуре операторов if, do, while, for в качестве условных выражений.
Перегрузка выполняется по следующим правилам:
•	оператор true должен возвращать значение true, если состояние объекта истинно и false в противном случае;
•	оператор false должен возвращать значение true, если состояние объекта ложно и false в противном случае;
•	операторы true и false надо перегружать в паре.

