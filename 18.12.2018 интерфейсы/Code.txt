
    interface IFly
    {
        void Fly();
    }

    interface ISwim
    {
        void Swim();
    }

    interface IRun
    {
        bool Run(int n);
    }
    abstract class Bird
    {
        protected string name;

        public void IsEggs() { }

        //public abstract void Fly();

        //public virtual void Swim()
        //{
        //    // ??
        //}
    }

    class Duck : Bird,IFly,ISwim
    {
        public Duck()
        {
            name = "Duck";
        }

        public void Fly()
        {
            Console.WriteLine($"{name} fly");
        }

        public void Swim()
        {
            Console.WriteLine($"{name} swim");
        }
    }

    class Penguin : Bird,ISwim
    {
        public Penguin()
        {
            name = "Penguin";
        }
        //public override void Fly()
        //{ // ???
        //    throw new NotImplementedException();
        //}

        public void Swim()
        {
            Console.WriteLine($"{name} swim");
        }
    }

    class Ostrich : Bird, IRun
    {
        public Ostrich()
        {
            name = "Ostrich";
        }

        public bool Run(int speed)
        {
            if (speed > 0)
            {
                Console.WriteLine($"{name} run");
                return true;
            }
            return false;
        }
    }

    abstract class Insect
    {
        protected string name;
    }

    class Butterfly : Insect, IFly
    {
        public Butterfly()
        {
            name = "Butterfly";
        }
        public void Fly()
        {
            Console.WriteLine($"{name} fly");
        }
    }

    class Plane:IFly
    {
        public void Fly()
        {
            Console.WriteLine($"Plane fly");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //Bird bird = new Duck();

            IFly[] fly = { new Plane(), new Duck(), new Butterfly() };

            foreach (IFly item in fly)
            {
                item.Fly();
            }

            Bird[] birds = { new Penguin(), new Duck(), new Ostrich() };

            foreach (Bird item in birds)
            {
                //((IFly)item).Fly(); // try catch

                if (item is IFly)
                {
                    (item as IFly).Fly();
                }
            }

            Console.ReadKey();
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using static System.Console;

namespace ConsoleCSharp
{
    abstract class Human
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime BirthDate { get; set; }
        public override string ToString()
        {
            return $"\nФамилия: {LastName} Имя: {FirstName} Дата рождения: {BirthDate.ToLongDateString()}";
        }
    }
    abstract class Employee : Human
    {
        public string Position { get; set; }
        public double Salary { get; set; }

        public override string ToString()
        {
            return base.ToString() + $"\nДолжность: {Position} Заработная плата: {Salary} $";
        }
    }
    interface IWorker
    {
        bool IsWorking { get; }
        string Work();
    }
    interface IManager
    {
        IWorker[] ListOfWorkers { get; set; }
        void Organize();
        void MakeBudget();
        void Control();
    }
    class Director : Employee, IManager
    {
        public IWorker[] ListOfWorkers { get; set; }

        public void Control()
        {
            WriteLine("Контролирую работу!");
        }

        public void MakeBudget()
        {
            WriteLine("Формирую бюджет!");
        }

        public void Organize()
        {
            WriteLine("Организую работу!");
        }
    }

    class Seller : Employee, IWorker
    {
        bool isWorking = true;

        public bool IsWorking
        {
            get
            {
                return isWorking;
            }
        }

        public string Work()
        {
            return "Продаю товар!";
        }
    }

    class Cashier : Employee, IWorker
    {
        public bool IsWorking { get; } = true;

        public string Work()
        {
            return "Принимаю оплату за товар!";
        }
    }

    class Storekeeper : Employee, IWorker
    {
        public bool IsWorking { get; set; }
        
        public string Work()
        {
            return "Учитываю товар!";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Director director = new Director { LastName = "Doe", FirstName = "John", BirthDate = new DateTime(1998, 10, 12), Position = "Директор", Salary = 12000 };

            IWorker seller = new Seller { LastName = "Beam", FirstName = "Jim", BirthDate = new DateTime(1956, 5, 23), Position = "Продавец", Salary = 3780 };

            if (seller is Employee)
                WriteLine($"Заработная плата продавца: {(seller as Employee).Salary}"); // приведение интерфейсной ссылки к классу Employee

            director.ListOfWorkers = new IWorker[] {
                seller,
                new Cashier { LastName = "Smith", FirstName = "Nicole", BirthDate = new DateTime(1956, 5, 23), Position = "Кассир", Salary = 3780 },
                new Storekeeper { LastName = "Ross", FirstName = "Bob", BirthDate = new DateTime(1956, 5, 23), Position = "Кладовщик", Salary = 4500 }
            };

            WriteLine(director);
            if (director is IManager) // использование оператора is
            {
                director.Control();
            }

            foreach (IWorker item in director.ListOfWorkers)
            {
                WriteLine(item);

                if (item is Storekeeper)
                {
                    (item as Storekeeper).IsWorking = true;
                }

                if (item.IsWorking)
                {
                    WriteLine(item.Work());
                }
            }
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using static System.Console;

namespace SimpleProject
{
    interface IIndexer
    {
        string this[int index]
        {
            get;
            set;
        }
        string this[string index]
        {
            get;
        }
    }

    enum Numbers { one, two, three, four, five };

    class IndexerClass : IIndexer
    {
        string[] _names = new string[5];

        public string this[int index]
        {
            get
            {
                return _names[index];
            }
            set
            {
                _names[index] = value;
            }
        }

        public string this[string index]
        {
            get
            {
                if (Enum.IsDefined(typeof(Numbers), index))
                    return _names[(int)Enum.Parse(typeof(Numbers), index)];
                else
                    return "";
            }
        }

        public IndexerClass()
        {
            // запись значений, используя индексатор с целочисленным параметром
            this[0] = "Bob";
            this[1] = "Candice";
            this[2] = "Jimmy";
            this[3] = "Joey";
            this[4] = "Nicole";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            IndexerClass indexerClass = new IndexerClass();

            WriteLine("\t\tВывод значений\n");
            WriteLine("Использование индексатора с целочисленным параметром:");
            for (int i = 0; i < 5; i++)
            {
                WriteLine(indexerClass[i]);
            }

            WriteLine("\nИспользование индексатора со строковым параметром:");
            foreach (string item in Enum.GetNames(typeof(Numbers)))
            {
                WriteLine(indexerClass[item]);
            }
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				Написать приложение «Праздничное небо».
В праздник в небе над городом можно наблюдать фейерверки, воздушные шары, группы парашютистов.
Эти объекты никак не связаны иерархией наследования, но все же ваше приложение должно реализовать объект «Праздничное небо», который является коллекцией «объектов праздничного неба» (подсказка – коллекцией/массивом интерфейсов).
В любой момент времени в небе можно наблюдать только один «объект праздничного неба», который пролетев по небу, исчезает и ему на смену приходит другой объект.
При старте приложения коллекция «Праздничное небо» заполняется случайным образом и случайным количеством «объектов праздничного неба». После чего начинается шоу.
Необходимо реализовать следующие виды фейерверков – крест, диагональный крест, цветок.
Виды парашютистов – группа «треугольник», группа «ромб». Виды воздушных шаров – цветок, хаос.
Продумать возможную иерархию родственных объектов.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    class MyClass
    {
        private DateTime _date;
        public static MyClass operator +(MyClass my, int n)
        {
            return my;
        }
        public void Show()
        {

        }
    }

            MyClass myClass = new MyClass();

            while (true)
            {
                ConsoleKeyInfo keyInfo = Console.ReadKey();

                switch (keyInfo.Key)
                {
                    case ConsoleKey.PageUp:
                        myClass += 12;
                        break;
                    case ConsoleKey.PageDown:
                        break;
                    case ConsoleKey.LeftArrow:
                        break;
                    case ConsoleKey.RightArrow:
                        break;
                    case ConsoleKey.UpArrow:
                        break;
                    case ConsoleKey.DownArrow:
                        break;
                }
            }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

interface IA
{
    string A1(int n);
}

interface IB
{
    int B1(int n);
    void B2();
}

interface IC : IA, IB
{
    void C1(int n);
}

class InherInterface : IC
{
    public string A1(int n)
    {
        throw new NotImplementedException();
    }

    public int B1(int n)
    {
        throw new NotImplementedException();
    }

    public void B2()
    {
        throw new NotImplementedException();
    }

    public void C1(int n)
    {
        throw new NotImplementedException();
    }
}

